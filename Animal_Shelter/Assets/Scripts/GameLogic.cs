using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

public class GameLogic : MonoBehaviour {
    //Singleton
    public enum GameState { EVENT, WEEK, ENDWEEK, WEEKSTART };
    public static GameLogic instance;
    public GameState gameState;
    public float money, reputation, publicityInversion;
    public int currentWeek, amountOfFood, foodCapacity, maxAnimalCapacity, currentAnimalCapacity;

    public List<Event> incomingEvents;
    public int currentEventIndex;

    [SerializeField]
    List<Instalation> instalations;

    void Awake() {
        if (instance == null) {
            instance = this;
            DontDestroyOnLoad(gameObject);
        } else {
            Destroy(gameObject);
        }
    }

    void Start() {
        //Until we start saving/loading file (it is coded, but not doing it yet) we start variable here
        StartVariables();
    }

    void Update() {
        switch (gameState) {
            case GameState.WEEKSTART:
                gameState = GameState.WEEK;
                break;
            case GameState.WEEK:

                //Here we'd set the entrance and management of clients

                break;
            case GameState.EVENT:
                if (currentEventIndex < incomingEvents.Count) {
                    if (!IsDisplayingCurrentEvent(incomingEvents[currentEventIndex])) {
                        DisplayCurrentEvent();
                    }
                } else {
                    gameState = GameState.WEEKSTART;
                    currentEventIndex = 0;
                }

                break;
            case GameState.ENDWEEK:
                ApplyWeekExpenses();
                gameState = GameState.EVENT;
                break;
        }
    }

    void DisplayCurrentEvent() {
        //Here we need a reference to the CanvasScript, to set the current event to incomingEvents[currentIndex]

    }

    bool IsDisplayingCurrentEvent(Event e) {
        //Here we need a reference to the CanvasScript, to check wether the current event is the one in the parameter
        return false;
    }

    //This method apply the total amount of food and money expenses to the resources
    public void ApplyWeekExpenses() {
        float moneyExpense = GetInstalationsUpKeep();
        int foodExpense = 0;
        money -= (moneyExpense + publicityInversion);
        amountOfFood -= (foodExpense);
        currentWeek++;
    }

    //This method changes the GameState
    public void EndWeek() {
        gameState = GameState.ENDWEEK;
    }

    //This method calculates the expenses generated by instalations
    float GetInstalationsUpKeep() {
        float temp = 0;
        foreach (Instalation i in instalations) {
            temp += i.GetUpKeep();
        }
        return temp;
    }



    #region File Permanency

    public void Save() {
        BinaryFormatter bf = new BinaryFormatter();
        FileStream file = File.Create(Application.persistentDataPath + "/playerInfo.dat");
        PlayerData data = new PlayerData();
        data.money = money;
        data.reputation = reputation;
        data.publicityInversion = publicityInversion;
        data.currentWeek = currentWeek;
        data.amountOfFood = amountOfFood;
        data.foodCapacity = foodCapacity;
        data.maxAnimalCapacity = maxAnimalCapacity;
        data.currentAnimalCapacity = currentAnimalCapacity;
        data.instalations = instalations;
        data.gameState = gameState;
        bf.Serialize(file, data);
        file.Close();
    }

    public void Load() {
        if (File.Exists(Application.persistentDataPath + "/playerInfo.dat")) {
            BinaryFormatter bf = new BinaryFormatter();
            FileStream file = File.Open(Application.persistentDataPath + "/playerInfo.dat", FileMode.Open);
            PlayerData data = (PlayerData)bf.Deserialize(file);
            file.Close();
            money = data.money;
            reputation = data.reputation;
            publicityInversion = data.publicityInversion;
            currentWeek = data.currentWeek;
            amountOfFood = data.amountOfFood;
            foodCapacity = data.foodCapacity;
            maxAnimalCapacity = data.maxAnimalCapacity;
            currentAnimalCapacity = data.currentAnimalCapacity;
            instalations = data.instalations;
            gameState = data.gameState;
        } else {
            StartVariables();
            Save();
        }
    }

    void StartVariables() {
        money = 1000;
        reputation = 0;
        publicityInversion = 0;
        currentWeek = 0;
        amountOfFood = 100;
        foodCapacity = 300;
        maxAnimalCapacity = 20;
        currentAnimalCapacity = 1;
        instalations = new List<Instalation>();
        gameState = GameState.WEEK;
        incomingEvents = new List<Event>();
        currentEventIndex = 0;
    }

    public class PlayerData {
        public float money, reputation, publicityInversion;
        public int currentWeek, amountOfFood, foodCapacity, maxAnimalCapacity, currentAnimalCapacity;
        public List<Instalation> instalations;
        public GameState gameState;
    };
    #endregion
}
